{"ast":null,"code":"import _classCallCheck from \"D:\\\\NGapBatch - 2\\\\Project\\\\EaseOnDelivery-2\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"D:\\\\NGapBatch - 2\\\\Project\\\\EaseOnDelivery-2\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"D:\\\\NGapBatch - 2\\\\Project\\\\EaseOnDelivery-2\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"D:\\\\NGapBatch - 2\\\\Project\\\\EaseOnDelivery-2\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"D:\\\\NGapBatch - 2\\\\Project\\\\EaseOnDelivery-2\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"D:\\\\NGapBatch - 2\\\\Project\\\\EaseOnDelivery-2\\\\src\\\\_components\\\\orderAcceptance\\\\Notifications.js\";\nimport React from 'react';\nimport { withStyles, withTheme } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport AcceptOrder from './OrderAccept';\nimport { createMuiTheme, MuiThemeProvider } from '@material-ui/core/styles';\nimport { red } from '@material-ui/core/styles';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport { Link } from 'react-router-dom';\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport TextField from '@material-ui/core/TextField';\nimport classNames from 'classnames';\nimport Typography from '@material-ui/core/Typography';\nvar muiTheme = createMuiTheme({\n  palette: {\n    primary: {\n      main: '#ecebeb'\n    },\n    secondary: {\n      main: '#000'\n    }\n  }\n});\n\nvar styles = function styles(theme) {\n  return {\n    root: {\n      display: 'flex',\n      flexWrap: 'wrap'\n    },\n    margin: {\n      margin: theme.spacing.unit\n    },\n    withoutLabel: {\n      marginTop: theme.spacing.unit * 3\n    },\n    textField: {\n      flexBasis: 200\n    },\n    card: {\n      maxWidth: 445\n    },\n    container: {\n      display: 'flex',\n      flexWrap: 'wrap'\n    },\n    manDateTime: {\n      marginLeft: theme.spacing.unit,\n      marginRight: theme.spacing.unit,\n      width: 200\n    }\n  };\n};\n\nvar Notifications =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Notifications, _React$Component);\n\n  function Notifications() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Notifications);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Notifications)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      open: true,\n      isAccept: false,\n      latestColor: \"primary\",\n      acceptColor: \"primary\",\n      deliveredColor: \"primary\",\n      latestVariant: 'contained',\n      acceptVariant: 'contained',\n      deliveredVariant: 'contained',\n      inboxBookingDetails: [],\n      latestCardVisible: false,\n      cardVisible: false,\n      cardButtonVisible: 0,\n      // 0 - Latest 1 - Other\n      viewBookingID: 0,\n      viewDetailsEnabled: false,\n      currentOrderStatus: 'Yet to Pick Order',\n      customerPINDisabled: true,\n      storePINConfirmed: false,\n      customerPINConfirmed: false,\n      storePIN: 0,\n      customerPIN: 0\n    };\n\n    _this.notifyCheck = function () {\n      console.log(\"i am checking\");\n    };\n\n    return _this;\n  }\n\n  _createClass(Notifications, [{\n    key: \"render\",\n    value: function render() {\n      var classes = this.props.classes;\n      return (// <div>\n        //   {this.props.state.requestFromPopUp ? (\n        //     <div>\n        //       {this.state.inboxBookingDetails.map((value,index) =>(\n        //         <Card key={value.bookingID} className={classes.card + \" largeCard \"}>\n        //           <List>\n        //             <br/>\n        //             <ListItemText className={\" listItemReceipt \"} primary=\"Pick Up\" secondary={value.pickupLocation} />\n        //             <ListItemText className={\" listItemReceipt \"} primary=\"Drop\" secondary={value.dropLocation} />\n        //             <ListItemText className={\" listItemReceipt \"} primary=\"Delivery Date\" secondary={value.deliveryDate} />\n        //             <ListItemText className={\" listItemReceipt \"} primary=\"Item Type\" secondary={value.itemType} />\n        //             <ListItemText className={\" listItemReceipt \"} primary=\"Tentative Weight\" secondary={value.itemTentativeWeight} />\n        //             <ListItemText className={\" listItemReceipt \"} primary=\"Vehicle Type\" secondary={value.vehicleType} />\n        //             <ListItemText className={\" listItemReceipt \"} primary=\"Store Person Name\" secondary={value.storePersonName} />\n        //             <ListItemText className={\" listItemReceipt \"} primary=\"Store Person No\" secondary={value.storePersonContactNo} />\n        //             <ListItemText className={\" listItemReceipt \"} primary=\"Payment Mode\" secondary={value.paymentMode} />\n        //           </List>\n        //             <CardActions className={\" confirmButtonAction \"}>\n        //             <Button size=\"small\" color=\"primary\" className=\"button-lg\" \n        //               onClick = {this.acceptOrder('ACCEPT')}>\n        //                 ACCEPT BOOKING\n        //             </Button>\n        //             <Button size=\"small\" color=\"primary\" className=\"button-lg\" \n        //               onClick = {this.acceptOrder('REJECT')}>\n        //                 REJECT BOOKING\n        //             </Button>\n        //           </CardActions>\n        //         </Card>\n        //       ))}\n        //     </div>\n        //   ) : (\n        //     <div>\n        //         <MuiThemeProvider theme={muiTheme}>\n        //           <Button variant={this.state.latestVariant} color={this.state.latestColor}  onClick={() => this.handleClickOpen('latest')} className = { \"notificationButton\" }>\n        //             Latest\n        //           </Button>\n        //           <Button variant={this.state.acceptVariant} color={this.state.acceptColor} onClick={() => this.handleClickOpen('accept')} className = { \"notificationButton\" }>\n        //             Accepted\n        //           </Button>\n        //           <Button variant={this.state.deliveredVariant} color={this.state.deliveredColor} onClick={() => this.handleClickOpen('delivered')} className = { \"notificationButton\" }>\n        //             DELIVERED\n        //           </Button>\n        //         </MuiThemeProvider>\n        //         <List>\n        //           {this.state.inboxBookingDetails.length > 0 ? (\n        //             !this.state.viewDetailsEnabled &&(\n        //               this.state.inboxBookingDetails.map((value,index) =>(\n        //                 value.bookingID % 2 === 0 ?(\n        //                   <ListItem key={value.bookingID} className = { \"notificationListOdd\" }  onClick={() => this.viewDetails(value.bookingID)}>\n        //                     <ListItemText \n        //                       primary={`BookingID : ${value.bookingID} : Pickup:  ${value.pickupLocation} - Drop : ${value.dropLocation}`}\n        //                     />\n        //                   </ListItem>\n        //                 ) : (\n        //                   <ListItem key={value.bookingID} className = { \"notificationListEven\" } onClick={() => this.viewDetails(value.bookingID)}>\n        //                     <ListItemText\n        //                       primary={`BookingID : ${value.bookingID} : Pickup:  ${value.pickupLocation} - Drop : ${value.dropLocation}`}\n        //                     />\n        //                   </ListItem>\n        //                 )\n        //               ))\n        //             )\n        //           ):(\n        //             <div>Currently Bookings not available</div>\n        //           )} \n        //           {this.state.inboxBookingDetails.map((value,index) =>(\n        //             this.state.cardVisible && this.state.viewBookingID === value.bookingID &&(\n        //               <Card key={value.bookingID} className={classes.card + \" largeCard \"}>\n        //                 <List>\n        //                   <br/>\n        //                   <ListItemText className={\" listItemReceipt \"} primary=\"Pick Up\" secondary={value.pickupLocation} />\n        //                   <ListItemText className={\" listItemReceipt \"} primary=\"Drop\" secondary={value.dropLocation} />\n        //                   <ListItemText className={\" listItemReceipt \"} primary=\"Delivery Date\" secondary={value.deliveryDate} />\n        //                   <ListItemText className={\" listItemReceipt \"} primary=\"Item Type\" secondary={value.itemType} />\n        //                   <ListItemText className={\" listItemReceipt \"} primary=\"Tentative Weight\" secondary={value.itemTentativeWeight} />\n        //                   <ListItemText className={\" listItemReceipt \"} primary=\"Vehicle Type\" secondary={value.vehicleType} />\n        //                   <ListItemText className={\" listItemReceipt \"} primary=\"Store Person Name\" secondary={value.storePersonName} />\n        //                   <ListItemText className={\" listItemReceipt \"} primary=\"Store Person No\" secondary={value.storePersonContactNo} />\n        //                   <ListItemText className={\" listItemReceipt \"} primary=\"Payment Mode\" secondary={value.paymentMode} />\n        //                   <ListItemText className={\" listItemReceipt \"} primary=\"Current Order Status\" secondary={this.state.currentOrderStatus} />\n        //                   <ListItemText className={\" listItemReceipt \"} primary=\"\" secondary=\"\" />\n        //                   <ListItemText className={\" listItemReceipt \"} primary=\"\" secondary= \" \" />\n        //                 </List>\n        //                 {this.state.latestCardVisible ? (\n        //                   <CardActions className={\" confirmButtonAction \"}>\n        //                     <Button size=\"small\" color=\"primary\" className=\"button-lg\" \n        //                       onClick = {this.acceptOrder('ACCEPT')}>\n        //                         ACCEPT BOOKING\n        //                     </Button>\n        //                     <Button size=\"small\" color=\"primary\" className=\"button-lg\" \n        //                       onClick = {this.acceptOrder('REJECT')}>\n        //                         REJECT BOOKING\n        //                     </Button>\n        //                   </CardActions>\n        //                 ) : (\n        //                   <div>\n        //                     {!this.state.storePINConfirmed && (\n        //                         <Card className={classes.card + \" smallCard \"}>\n        //                           <Typography gutterBottom variant=\"h5\" component=\"h2\" className={\"typography\"}>\n        //                               Verify Store PIN\n        //                           </Typography>\n        //                             <TextField\n        //                             className={classNames(classes.margin, classes.textField) + \" fields \"}\n        //                             label=\"Store PIN\"\n        //                             placeholder = \"Enter Store PIN\"\n        //                             onChange = {this.setStateOnChange('storePIN')}\n        //                             />\n        //                             <CardActions className={\" confirmButtonAction \"}>\n        //                               <Button size=\"small\" color=\"primary\" className=\"button-lg\" \n        //                                 onClick = {this.verifyPIN('S')}>\n        //                                   SUBMIT\n        //                               </Button>\n        //                             </CardActions>\n        //                         </Card>\n        //                     )}\n        //                     {!this.state.customerPINConfirmed && (\n        //                         <Card className={classes.card + \" smallCard \"}>\n        //                           <Typography gutterBottom variant=\"h5\" component=\"h2\" className={\"typography\"}>\n        //                             Verify Customer PIN\n        //                           </Typography>\n        //                           <TextField\n        //                           className={classNames(classes.margin, classes.textField) + \" fields \"}\n        //                           label=\"Customer PIN\"\n        //                           placeholder = \"Enter Customer PIN\"\n        //                           disabled = {this.state.customerPINDisabled}\n        //                           onChange = {this.setStateOnChange('customerPIN')}\n        //                           />\n        //                             <CardActions className={\" confirmButtonAction \"}>\n        //                               <Button size=\"small\" color=\"primary\" className=\"button-lg\" \n        //                                 onClick = {this.verifyPIN('C')}>\n        //                                   SUBMIT\n        //                               </Button>\n        //                             </CardActions>\n        //                         </Card>\n        //                     )}\n        //                   </div>\n        //                 )}\n        //               </Card>\n        //             )\n        //           ))}\n        //         </List>\n        //     </div>\n        //   )}\n        //     {/* {this.state.isAccept &&\n        //         <AcceptOrder />\n        //     } */}\n        // </div>\n        React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 424\n          },\n          __self: this\n        })\n      );\n    }\n  }]);\n\n  return Notifications;\n}(React.Component); // export default Notifications;\n\n\nexport default withStyles(styles)(Notifications);","map":{"version":3,"sources":["D:\\NGapBatch - 2\\Project\\EaseOnDelivery-2\\src\\_components\\orderAcceptance\\Notifications.js"],"names":["React","withStyles","withTheme","Button","AcceptOrder","createMuiTheme","MuiThemeProvider","red","List","ListItem","ListItemText","Link","Card","CardActions","CardContent","TextField","classNames","Typography","muiTheme","palette","primary","main","secondary","styles","theme","root","display","flexWrap","margin","spacing","unit","withoutLabel","marginTop","textField","flexBasis","card","maxWidth","container","manDateTime","marginLeft","marginRight","width","Notifications","state","open","isAccept","latestColor","acceptColor","deliveredColor","latestVariant","acceptVariant","deliveredVariant","inboxBookingDetails","latestCardVisible","cardVisible","cardButtonVisible","viewBookingID","viewDetailsEnabled","currentOrderStatus","customerPINDisabled","storePINConfirmed","customerPINConfirmed","storePIN","customerPIN","notifyCheck","console","log","classes","props","Component"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { withStyles, withTheme } from '@material-ui/core/styles';\r\nimport Button from '@material-ui/core/Button';\r\nimport AcceptOrder from './OrderAccept'\r\nimport { createMuiTheme,MuiThemeProvider } from '@material-ui/core/styles';\r\nimport { red } from '@material-ui/core/styles';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport {Link}from 'react-router-dom'\r\nimport Card from '@material-ui/core/Card';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport classNames from 'classnames';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nconst muiTheme = createMuiTheme({\r\n  palette: {\r\n      primary: {\r\n          main: '#ecebeb',\r\n      },\r\n      secondary: {\r\n          main: '#000',\r\n      },\r\n  },\r\n});\r\n\r\nconst styles = theme => ({\r\n  root: {\r\n    display: 'flex',\r\n    flexWrap: 'wrap',\r\n  },\r\n  margin: {\r\n    margin: theme.spacing.unit,\r\n  },\r\n  withoutLabel: {\r\n    marginTop: theme.spacing.unit * 3,\r\n  },\r\n  textField: {\r\n    flexBasis: 200,\r\n  },\r\n  card: {\r\n    maxWidth: 445,\r\n  },\r\n  container: {\r\n    display: 'flex',\r\n    flexWrap: 'wrap',\r\n  },\r\n  manDateTime: {\r\n    marginLeft: theme.spacing.unit,\r\n    marginRight: theme.spacing.unit,\r\n    width: 200,\r\n  },\r\n  \r\n});\r\n\r\nclass Notifications extends React.Component {\r\n  state = {\r\n    open: true,\r\n    isAccept : false,\r\n    latestColor : \"primary\",\r\n    acceptColor : \"primary\",\r\n    deliveredColor : \"primary\",\r\n    latestVariant : 'contained',\r\n    acceptVariant : 'contained',\r\n    deliveredVariant : 'contained',\r\n    inboxBookingDetails : [],\r\n    latestCardVisible : false,\r\n    cardVisible : false,\r\n    cardButtonVisible : 0, // 0 - Latest 1 - Other\r\n    viewBookingID : 0,\r\n    viewDetailsEnabled : false,\r\n    currentOrderStatus : 'Yet to Pick Order',\r\n    customerPINDisabled : true,\r\n    storePINConfirmed : false,\r\n    customerPINConfirmed : false,\r\n    storePIN : 0,\r\n    customerPIN : 0\r\n  };\r\n\r\n  // componentDidMount() {\r\n  //   console.log(\"Request From Map \" + this.props.state.requestFromPopUp);\r\n  //   console.log(\"Booking ID is \" + this.props.state.viewBookingID);\r\n  //   if(this.props.state.requestFromPopUp === true){\r\n  //     this.viewBookings(this.props.state.viewBookingID);    \r\n  //   }else{\r\n  //     this.getBookings(\"I\");\r\n  //   }\r\n  //   this.handleClickOpen('latest');\r\n  // }\r\n\r\n  // setStateOnChange = (stateObject) => (e) => {\r\n  //   this.setState ({ [stateObject] : e.target.value})\r\n  // }\r\n\r\n  // acceptOrder = (type) => {\r\n  //   console.log(\"Type is \" , type);\r\n  //   var request = {};\r\n  //   var url = \"\"\r\n  //   if(type == 'ACCEPT'){\r\n  //     request = {\r\n  //       bookingID : this.state.viewBookingID,\r\n  //       providerID : 2,\r\n  //       bookingTxnStatus : \"A\",\r\n  //     }\r\n  //   }else if(type == 'REJECT'){\r\n  //     request = {\r\n  //       bookingID : this.state.viewBookingID,\r\n  //       providerID : 2,\r\n  //       bookingTxnStatus : \"R\",\r\n  //     }\r\n  //   }\r\n  //   this.props.callPostServices(request,url).then(response =>{\r\n  //     console.log(response)\r\n  //     if(type == 'ACCEPT'){\r\n  //       // this.setState({\r\n  //       //   storePINConfirmed : true,\r\n  //       //   currentOrderStatus : \"Order Picked up, Moving towards Destination\"\r\n  //       // })\r\n  //     }else if(type == 'REJECT'){\r\n  //       // this.setState({\r\n  //       //   customerPINConfirmed : true,\r\n  //       //   currentOrderStatus : \"Order Delivered Successfully.!\" \r\n  //       // })\r\n  //     }\r\n  //   }).catch(error => {\r\n  //     console.log(error)\r\n  //   })\r\n  // }\r\n\r\n  // verifyPIN = (type) => {\r\n  //   console.log(\"Type is \" , type);\r\n  //   var request = {};\r\n  //   var url = \"/verify/\"\r\n  //   if(type == 'S'){\r\n  //     url = `${url}${this.state.viewBookingID}/${type}/${this.state.storePIN}`\r\n  //   }else if(type == 'C'){\r\n  //     url = `${url}${this.state.viewBookingID}/${type}/${this.state.customerPIN}`\r\n  //   }\r\n\r\n  //   this.props.callGetServices(url).then(response =>{\r\n  //     console.log(\"response is \" + response)\r\n  //     let responseData = response.data;\r\n  //     if(responseData.responseCode == \"00\"){\r\n  //       if(type == 'S'){\r\n  //         this.setState({\r\n  //           storePINConfirmed : true,\r\n  //           currentOrderStatus : \"Order Picked up, Moving towards Destination\"\r\n  //         })\r\n  //       }else if(type == 'C'){\r\n  //         this.setState({\r\n  //           customerPINConfirmed : true,\r\n  //           currentOrderStatus : \"Order Delivered Successfully.!\" \r\n  //         })\r\n  //       }\r\n  //     }\r\n  //   }).catch(error => {\r\n  //     console.log(error)\r\n  //   })\r\n  // }\r\n\r\n  // viewBookings = (bookingID) => {\r\n  //   console.log(\"inside view bookings\" + bookingID)\r\n  //   let url = \"view/\" + bookingID;\r\n  //   this.props.callGetServices(url).then(value =>{\r\n  //     this.setState({\r\n  //       inboxBookingDetails : value.data.bookingDetails\r\n  //     })\r\n  //     console.log(\"value is \" + value.data.bookingDetails)\r\n  //   }).catch(error =>{\r\n  //     console.log(error);\r\n  //   })\r\n  // }\r\n\r\n  // getBookings = (status) => {\r\n  //   let url = \"searchRide/2/\" + status;\r\n  //   this.props.callGetServices(url).then(value =>{\r\n  //     this.setState({\r\n  //       inboxBookingDetails : value.data.bookingDetails\r\n  //     })\r\n  //     console.log(\"value is \" + value.data.bookingDetails)\r\n  //   }).catch(error =>{\r\n  //     console.log(error);\r\n  //   })\r\n  // }\r\n\r\n  // viewDetails = (viewBookingID) =>{\r\n  //   console.log(\"inside View Details\" + viewBookingID)\r\n  //   var latestCardVisible = false;\r\n  //   if(this.state.cardButtonVisible === 0){\r\n  //     latestCardVisible = true;\r\n  //   }else{\r\n  //     latestCardVisible = false;\r\n  //   }\r\n\r\n  //   this.setState({\r\n  //     latestCardVisible : latestCardVisible,\r\n  //     viewBookingID : viewBookingID,\r\n  //     viewDetailsEnabled : true,\r\n  //     cardVisible : true\r\n  //   })\r\n  // }\r\n\r\n  // handleClickOpen = (value) => {\r\n  //   console.log(\"value is \", value);\r\n  //   var latestVariant = \"\";\r\n  //   var acceptVariant = \"\";\r\n  //   var deliveredVariant = \"\";\r\n  //   var latestColor = \"\";\r\n  //   var acceptColor = \"\";\r\n  //   var deliveredColor = \"\";\r\n  //   var cardButtonVisible = 0\r\n  //   var status = \"I\";\r\n  //   if(value == 'latest'){\r\n  //     latestVariant = \"outlined\";\r\n  //     acceptVariant = \"contained\";\r\n  //     deliveredVariant = \"contained\";\r\n  //     latestColor = \"secondary\";\r\n  //     acceptColor = \"primary\";\r\n  //     deliveredColor = \"primary\";\r\n  //     cardButtonVisible = 0;\r\n  //     status = \"I\";\r\n  //   }else if(value == 'accept'){\r\n  //     latestVariant = \"contained\";\r\n  //     acceptVariant = \"outlined\";\r\n  //     deliveredVariant = \"contained\";\r\n  //     latestColor = \"primary\";\r\n  //     acceptColor = \"secondary\";\r\n  //     deliveredColor = \"primary\";\r\n  //     cardButtonVisible = 1;\r\n  //     status = \"A\";\r\n  //   }else if(value == 'delivered'){\r\n  //     latestVariant = \"contained\";\r\n  //     acceptVariant = \"contained\";\r\n  //     deliveredVariant = \"outlined\";\r\n  //     latestColor = \"primary\";\r\n  //     acceptColor = \"primary\";\r\n  //     deliveredColor = \"secondary\";\r\n  //     cardButtonVisible = 1;\r\n  //     status = \"D\";\r\n  //   }\r\n\r\n  //   this.setState({\r\n  //     isAccept : true,\r\n  //     latestVariant : latestVariant,\r\n  //     acceptVariant : acceptVariant,\r\n  //     deliveredVariant : deliveredVariant,\r\n  //     latestColor : latestColor,\r\n  //     acceptColor : acceptColor,\r\n  //     deliveredColor : deliveredColor,\r\n  //     cardButtonVisible : cardButtonVisible,\r\n  //     viewDetailsEnabled : false,\r\n  //     latestCardVisible : false,\r\n  //     cardVisible : false\r\n  //   });\r\n  //   this.getBookings(status);\r\n  // };\r\n\r\n  // handleClose = () => {\r\n  //   this.setState({ open: false });\r\n  // };\r\n\r\n  // handleAccept = () =>{\r\n  //   this.setState({isAccept : true});\r\n  //   this.handleClose()\r\n  // };\r\n\r\n  notifyCheck = () => {\r\n    console.log(\"i am checking\")\r\n  }\r\n  render() {\r\n    const { classes} = this.props;\r\n    return (\r\n      // <div>\r\n      //   {this.props.state.requestFromPopUp ? (\r\n      //     <div>\r\n      //       {this.state.inboxBookingDetails.map((value,index) =>(\r\n      //         <Card key={value.bookingID} className={classes.card + \" largeCard \"}>\r\n      //           <List>\r\n      //             <br/>\r\n      //             <ListItemText className={\" listItemReceipt \"} primary=\"Pick Up\" secondary={value.pickupLocation} />\r\n      //             <ListItemText className={\" listItemReceipt \"} primary=\"Drop\" secondary={value.dropLocation} />\r\n      //             <ListItemText className={\" listItemReceipt \"} primary=\"Delivery Date\" secondary={value.deliveryDate} />\r\n      //             <ListItemText className={\" listItemReceipt \"} primary=\"Item Type\" secondary={value.itemType} />\r\n      //             <ListItemText className={\" listItemReceipt \"} primary=\"Tentative Weight\" secondary={value.itemTentativeWeight} />\r\n      //             <ListItemText className={\" listItemReceipt \"} primary=\"Vehicle Type\" secondary={value.vehicleType} />\r\n      //             <ListItemText className={\" listItemReceipt \"} primary=\"Store Person Name\" secondary={value.storePersonName} />\r\n      //             <ListItemText className={\" listItemReceipt \"} primary=\"Store Person No\" secondary={value.storePersonContactNo} />\r\n      //             <ListItemText className={\" listItemReceipt \"} primary=\"Payment Mode\" secondary={value.paymentMode} />\r\n      //           </List>\r\n      //             <CardActions className={\" confirmButtonAction \"}>\r\n      //             <Button size=\"small\" color=\"primary\" className=\"button-lg\" \r\n      //               onClick = {this.acceptOrder('ACCEPT')}>\r\n      //                 ACCEPT BOOKING\r\n      //             </Button>\r\n      //             <Button size=\"small\" color=\"primary\" className=\"button-lg\" \r\n      //               onClick = {this.acceptOrder('REJECT')}>\r\n      //                 REJECT BOOKING\r\n      //             </Button>\r\n      //           </CardActions>\r\n      //         </Card>\r\n      //       ))}\r\n      //     </div>\r\n      //   ) : (\r\n      //     <div>\r\n      //         <MuiThemeProvider theme={muiTheme}>\r\n      //           <Button variant={this.state.latestVariant} color={this.state.latestColor}  onClick={() => this.handleClickOpen('latest')} className = { \"notificationButton\" }>\r\n      //             Latest\r\n      //           </Button>\r\n      //           <Button variant={this.state.acceptVariant} color={this.state.acceptColor} onClick={() => this.handleClickOpen('accept')} className = { \"notificationButton\" }>\r\n      //             Accepted\r\n      //           </Button>\r\n      //           <Button variant={this.state.deliveredVariant} color={this.state.deliveredColor} onClick={() => this.handleClickOpen('delivered')} className = { \"notificationButton\" }>\r\n      //             DELIVERED\r\n      //           </Button>\r\n      //         </MuiThemeProvider>\r\n      //         <List>\r\n      //           {this.state.inboxBookingDetails.length > 0 ? (\r\n      //             !this.state.viewDetailsEnabled &&(\r\n      //               this.state.inboxBookingDetails.map((value,index) =>(\r\n      //                 value.bookingID % 2 === 0 ?(\r\n      //                   <ListItem key={value.bookingID} className = { \"notificationListOdd\" }  onClick={() => this.viewDetails(value.bookingID)}>\r\n      //                     <ListItemText \r\n      //                       primary={`BookingID : ${value.bookingID} : Pickup:  ${value.pickupLocation} - Drop : ${value.dropLocation}`}\r\n      //                     />\r\n      //                   </ListItem>\r\n      //                 ) : (\r\n      //                   <ListItem key={value.bookingID} className = { \"notificationListEven\" } onClick={() => this.viewDetails(value.bookingID)}>\r\n      //                     <ListItemText\r\n      //                       primary={`BookingID : ${value.bookingID} : Pickup:  ${value.pickupLocation} - Drop : ${value.dropLocation}`}\r\n      //                     />\r\n      //                   </ListItem>\r\n      //                 )\r\n      //               ))\r\n      //             )\r\n      //           ):(\r\n      //             <div>Currently Bookings not available</div>\r\n      //           )} \r\n      //           {this.state.inboxBookingDetails.map((value,index) =>(\r\n      //             this.state.cardVisible && this.state.viewBookingID === value.bookingID &&(\r\n      //               <Card key={value.bookingID} className={classes.card + \" largeCard \"}>\r\n      //                 <List>\r\n      //                   <br/>\r\n      //                   <ListItemText className={\" listItemReceipt \"} primary=\"Pick Up\" secondary={value.pickupLocation} />\r\n      //                   <ListItemText className={\" listItemReceipt \"} primary=\"Drop\" secondary={value.dropLocation} />\r\n      //                   <ListItemText className={\" listItemReceipt \"} primary=\"Delivery Date\" secondary={value.deliveryDate} />\r\n      //                   <ListItemText className={\" listItemReceipt \"} primary=\"Item Type\" secondary={value.itemType} />\r\n      //                   <ListItemText className={\" listItemReceipt \"} primary=\"Tentative Weight\" secondary={value.itemTentativeWeight} />\r\n      //                   <ListItemText className={\" listItemReceipt \"} primary=\"Vehicle Type\" secondary={value.vehicleType} />\r\n      //                   <ListItemText className={\" listItemReceipt \"} primary=\"Store Person Name\" secondary={value.storePersonName} />\r\n      //                   <ListItemText className={\" listItemReceipt \"} primary=\"Store Person No\" secondary={value.storePersonContactNo} />\r\n      //                   <ListItemText className={\" listItemReceipt \"} primary=\"Payment Mode\" secondary={value.paymentMode} />\r\n      //                   <ListItemText className={\" listItemReceipt \"} primary=\"Current Order Status\" secondary={this.state.currentOrderStatus} />\r\n      //                   <ListItemText className={\" listItemReceipt \"} primary=\"\" secondary=\"\" />\r\n      //                   <ListItemText className={\" listItemReceipt \"} primary=\"\" secondary= \" \" />\r\n      //                 </List>\r\n                      \r\n      //                 {this.state.latestCardVisible ? (\r\n      //                   <CardActions className={\" confirmButtonAction \"}>\r\n      //                     <Button size=\"small\" color=\"primary\" className=\"button-lg\" \r\n      //                       onClick = {this.acceptOrder('ACCEPT')}>\r\n      //                         ACCEPT BOOKING\r\n      //                     </Button>\r\n      //                     <Button size=\"small\" color=\"primary\" className=\"button-lg\" \r\n      //                       onClick = {this.acceptOrder('REJECT')}>\r\n      //                         REJECT BOOKING\r\n      //                     </Button>\r\n      //                   </CardActions>\r\n      //                 ) : (\r\n      //                   <div>\r\n      //                     {!this.state.storePINConfirmed && (\r\n      //                         <Card className={classes.card + \" smallCard \"}>\r\n      //                           <Typography gutterBottom variant=\"h5\" component=\"h2\" className={\"typography\"}>\r\n      //                               Verify Store PIN\r\n      //                           </Typography>\r\n      //                             <TextField\r\n      //                             className={classNames(classes.margin, classes.textField) + \" fields \"}\r\n      //                             label=\"Store PIN\"\r\n      //                             placeholder = \"Enter Store PIN\"\r\n      //                             onChange = {this.setStateOnChange('storePIN')}\r\n      //                             />\r\n      //                             <CardActions className={\" confirmButtonAction \"}>\r\n      //                               <Button size=\"small\" color=\"primary\" className=\"button-lg\" \r\n      //                                 onClick = {this.verifyPIN('S')}>\r\n      //                                   SUBMIT\r\n      //                               </Button>\r\n      //                             </CardActions>\r\n      //                         </Card>\r\n      //                     )}\r\n      //                     {!this.state.customerPINConfirmed && (\r\n      //                         <Card className={classes.card + \" smallCard \"}>\r\n      //                           <Typography gutterBottom variant=\"h5\" component=\"h2\" className={\"typography\"}>\r\n      //                             Verify Customer PIN\r\n      //                           </Typography>\r\n      //                           <TextField\r\n      //                           className={classNames(classes.margin, classes.textField) + \" fields \"}\r\n      //                           label=\"Customer PIN\"\r\n      //                           placeholder = \"Enter Customer PIN\"\r\n      //                           disabled = {this.state.customerPINDisabled}\r\n      //                           onChange = {this.setStateOnChange('customerPIN')}\r\n      //                           />\r\n      //                             <CardActions className={\" confirmButtonAction \"}>\r\n      //                               <Button size=\"small\" color=\"primary\" className=\"button-lg\" \r\n      //                                 onClick = {this.verifyPIN('C')}>\r\n      //                                   SUBMIT\r\n      //                               </Button>\r\n      //                             </CardActions>\r\n      //                         </Card>\r\n      //                     )}\r\n      //                   </div>\r\n      //                 )}\r\n      //               </Card>\r\n      //             )\r\n      //           ))}\r\n      //         </List>\r\n      //     </div>\r\n      //   )}\r\n          \r\n      //     {/* {this.state.isAccept &&\r\n      //         <AcceptOrder />\r\n      //     } */}\r\n      // </div>\r\n      <div></div>\r\n    );\r\n  }\r\n}\r\n\r\n// export default Notifications;\r\nexport default withStyles(styles)(Notifications);"]},"metadata":{},"sourceType":"module"}